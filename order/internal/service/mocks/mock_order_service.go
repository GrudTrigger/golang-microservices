// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/rocket-crm/order/internal/model"
	mock "github.com/stretchr/testify/mock"

	orders_v1 "github.com/rocker-crm/shared/pkg/openapi/orders/v1"
)

// OrderService is an autogenerated mock type for the OrderService type
type OrderService struct {
	mock.Mock
}

type OrderService_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderService) EXPECT() *OrderService_Expecter {
	return &OrderService_Expecter{mock: &_m.Mock}
}

// CancelOrder provides a mock function with given fields: ctx, orderUuid
func (_m *OrderService) CancelOrder(ctx context.Context, orderUuid string) (orders_v1.CancelOrderRes, error) {
	ret := _m.Called(ctx, orderUuid)

	if len(ret) == 0 {
		panic("no return value specified for CancelOrder")
	}

	var r0 orders_v1.CancelOrderRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (orders_v1.CancelOrderRes, error)); ok {
		return rf(ctx, orderUuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) orders_v1.CancelOrderRes); ok {
		r0 = rf(ctx, orderUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orders_v1.CancelOrderRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_CancelOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelOrder'
type OrderService_CancelOrder_Call struct {
	*mock.Call
}

// CancelOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUuid string
func (_e *OrderService_Expecter) CancelOrder(ctx interface{}, orderUuid interface{}) *OrderService_CancelOrder_Call {
	return &OrderService_CancelOrder_Call{Call: _e.mock.On("CancelOrder", ctx, orderUuid)}
}

func (_c *OrderService_CancelOrder_Call) Run(run func(ctx context.Context, orderUuid string)) *OrderService_CancelOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrderService_CancelOrder_Call) Return(_a0 orders_v1.CancelOrderRes, _a1 error) *OrderService_CancelOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_CancelOrder_Call) RunAndReturn(run func(context.Context, string) (orders_v1.CancelOrderRes, error)) *OrderService_CancelOrder_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrder provides a mock function with given fields: ctx, data
func (_m *OrderService) CreateOrder(ctx context.Context, data model.CreateOrder) (model.ResponseCreateOrder, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 model.ResponseCreateOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateOrder) (model.ResponseCreateOrder, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateOrder) model.ResponseCreateOrder); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(model.ResponseCreateOrder)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.CreateOrder) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type OrderService_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - data model.CreateOrder
func (_e *OrderService_Expecter) CreateOrder(ctx interface{}, data interface{}) *OrderService_CreateOrder_Call {
	return &OrderService_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, data)}
}

func (_c *OrderService_CreateOrder_Call) Run(run func(ctx context.Context, data model.CreateOrder)) *OrderService_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.CreateOrder))
	})
	return _c
}

func (_c *OrderService_CreateOrder_Call) Return(_a0 model.ResponseCreateOrder, _a1 error) *OrderService_CreateOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_CreateOrder_Call) RunAndReturn(run func(context.Context, model.CreateOrder) (model.ResponseCreateOrder, error)) *OrderService_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderByUuid provides a mock function with given fields: ctx, orderUuid
func (_m *OrderService) GetOrderByUuid(ctx context.Context, orderUuid string) (model.Order, error) {
	ret := _m.Called(ctx, orderUuid)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderByUuid")
	}

	var r0 model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Order, error)); ok {
		return rf(ctx, orderUuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Order); ok {
		r0 = rf(ctx, orderUuid)
	} else {
		r0 = ret.Get(0).(model.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_GetOrderByUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderByUuid'
type OrderService_GetOrderByUuid_Call struct {
	*mock.Call
}

// GetOrderByUuid is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUuid string
func (_e *OrderService_Expecter) GetOrderByUuid(ctx interface{}, orderUuid interface{}) *OrderService_GetOrderByUuid_Call {
	return &OrderService_GetOrderByUuid_Call{Call: _e.mock.On("GetOrderByUuid", ctx, orderUuid)}
}

func (_c *OrderService_GetOrderByUuid_Call) Run(run func(ctx context.Context, orderUuid string)) *OrderService_GetOrderByUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrderService_GetOrderByUuid_Call) Return(_a0 model.Order, _a1 error) *OrderService_GetOrderByUuid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_GetOrderByUuid_Call) RunAndReturn(run func(context.Context, string) (model.Order, error)) *OrderService_GetOrderByUuid_Call {
	_c.Call.Return(run)
	return _c
}

// PayOrder provides a mock function with given fields: ctx, paymentMethod, orderUuid
func (_m *OrderService) PayOrder(ctx context.Context, paymentMethod string, orderUuid string) (string, error) {
	ret := _m.Called(ctx, paymentMethod, orderUuid)

	if len(ret) == 0 {
		panic("no return value specified for PayOrder")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, paymentMethod, orderUuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, paymentMethod, orderUuid)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, paymentMethod, orderUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_PayOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PayOrder'
type OrderService_PayOrder_Call struct {
	*mock.Call
}

// PayOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - paymentMethod string
//   - orderUuid string
func (_e *OrderService_Expecter) PayOrder(ctx interface{}, paymentMethod interface{}, orderUuid interface{}) *OrderService_PayOrder_Call {
	return &OrderService_PayOrder_Call{Call: _e.mock.On("PayOrder", ctx, paymentMethod, orderUuid)}
}

func (_c *OrderService_PayOrder_Call) Run(run func(ctx context.Context, paymentMethod string, orderUuid string)) *OrderService_PayOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *OrderService_PayOrder_Call) Return(_a0 string, _a1 error) *OrderService_PayOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_PayOrder_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *OrderService_PayOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderService creates a new instance of OrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderService {
	mock := &OrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
