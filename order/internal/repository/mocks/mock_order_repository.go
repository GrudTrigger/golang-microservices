// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/rocket-crm/order/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

type OrderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderRepository) EXPECT() *OrderRepository_Expecter {
	return &OrderRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, req, totalPrice
func (_m *OrderRepository) Create(ctx context.Context, req model.CreateOrder, totalPrice float32) (model.Order, error) {
	ret := _m.Called(ctx, req, totalPrice)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateOrder, float32) (model.Order, error)); ok {
		return rf(ctx, req, totalPrice)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateOrder, float32) model.Order); ok {
		r0 = rf(ctx, req, totalPrice)
	} else {
		r0 = ret.Get(0).(model.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.CreateOrder, float32) error); ok {
		r1 = rf(ctx, req, totalPrice)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type OrderRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - req model.CreateOrder
//   - totalPrice float32
func (_e *OrderRepository_Expecter) Create(ctx interface{}, req interface{}, totalPrice interface{}) *OrderRepository_Create_Call {
	return &OrderRepository_Create_Call{Call: _e.mock.On("Create", ctx, req, totalPrice)}
}

func (_c *OrderRepository_Create_Call) Run(run func(ctx context.Context, req model.CreateOrder, totalPrice float32)) *OrderRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.CreateOrder), args[2].(float32))
	})
	return _c
}

func (_c *OrderRepository_Create_Call) Return(_a0 model.Order, _a1 error) *OrderRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepository_Create_Call) RunAndReturn(run func(context.Context, model.CreateOrder, float32) (model.Order, error)) *OrderRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUuid provides a mock function with given fields: ctx, uuid
func (_m *OrderRepository) GetByUuid(ctx context.Context, uuid string) (model.Order, error) {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetByUuid")
	}

	var r0 model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Order, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Order); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(model.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepository_GetByUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUuid'
type OrderRepository_GetByUuid_Call struct {
	*mock.Call
}

// GetByUuid is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *OrderRepository_Expecter) GetByUuid(ctx interface{}, uuid interface{}) *OrderRepository_GetByUuid_Call {
	return &OrderRepository_GetByUuid_Call{Call: _e.mock.On("GetByUuid", ctx, uuid)}
}

func (_c *OrderRepository_GetByUuid_Call) Run(run func(ctx context.Context, uuid string)) *OrderRepository_GetByUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrderRepository_GetByUuid_Call) Return(_a0 model.Order, _a1 error) *OrderRepository_GetByUuid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepository_GetByUuid_Call) RunAndReturn(run func(context.Context, string) (model.Order, error)) *OrderRepository_GetByUuid_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, uuid, transactionUuid, paymentMethod, status
func (_m *OrderRepository) Update(ctx context.Context, uuid string, transactionUuid string, paymentMethod string, status string) (string, error) {
	ret := _m.Called(ctx, uuid, transactionUuid, paymentMethod, status)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (string, error)); ok {
		return rf(ctx, uuid, transactionUuid, paymentMethod, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) string); ok {
		r0 = rf(ctx, uuid, transactionUuid, paymentMethod, status)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, uuid, transactionUuid, paymentMethod, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type OrderRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - transactionUuid string
//   - paymentMethod string
//   - status string
func (_e *OrderRepository_Expecter) Update(ctx interface{}, uuid interface{}, transactionUuid interface{}, paymentMethod interface{}, status interface{}) *OrderRepository_Update_Call {
	return &OrderRepository_Update_Call{Call: _e.mock.On("Update", ctx, uuid, transactionUuid, paymentMethod, status)}
}

func (_c *OrderRepository_Update_Call) Run(run func(ctx context.Context, uuid string, transactionUuid string, paymentMethod string, status string)) *OrderRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *OrderRepository_Update_Call) Return(_a0 string, _a1 error) *OrderRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepository_Update_Call) RunAndReturn(run func(context.Context, string, string, string, string) (string, error)) *OrderRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderRepository creates a new instance of OrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepository {
	mock := &OrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
